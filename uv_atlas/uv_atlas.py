bl_info = {
    "name": "uv_atlas_tool",
    "author": "Igor Unguryznov aka Igron",
    "version": (1, 0),
    "blender": (4, 5, 0),
    "location": "View3D > Sidebar > UV Atlas",
    "description": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞–∫–æ–≤–∫–∏ UV –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON —Å–ø—Ä–∞–π—Ç-–∞—Ç–ª–∞—Å–∞",
    "warning": "",
    "doc_url": "",
    "category": "UV",
}
import bpy
import os
import json
import re
import numpy as np

# --- –£—Ç–∏–ª–∏—Ç—ã ---------------------------------------------------------------

def normalize_name(name):
    name = name.lower()
    name = os.path.basename(name)
    name = re.sub(r'\.\d{3}$', '', name)  # –£–¥–∞–ª—è–µ–º Blender-—Å—É—Ñ—Ñ–∏–∫—Å—ã –≤—Ä–æ–¥–µ .001, .002 –ø–µ—Ä–µ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    name = re.sub(r'\.\w+$', '', name)   # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .tga)
    name = re.sub(r'-', '_', name)       # –ó–∞–º–µ–Ω–∞ –¥–µ—Ñ–∏—Å–∞ –Ω–∞ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å JSON
    name = re.sub(r'^t_', '', name)
    name = re.sub(r'_(albedo|basecolor)$', '', name)
    name = re.sub(r'_lod\d+$', '', name)
    # –£–±—Ä–∞–Ω–æ re.sub(r'_[a-z0-9]+$', '', name) ‚Äî –æ–Ω–æ –ª–æ–º–∞–ª–æ –∏–º–µ–Ω–∞ –≤—Ä–æ–¥–µ '_atlas'
    return name

def get_texture_name_from_material(mat):
    if not mat or not mat.use_nodes:
        return None
    tree = mat.node_tree
    principled = next((n for n in tree.nodes if n.type == 'BSDF_PRINCIPLED'), None)
    if not principled:
        return None
    base_color_input = principled.inputs.get('Base Color')
    if not base_color_input or not base_color_input.is_linked:
        return None
    linked_node = base_color_input.links[0].from_node
    if linked_node.type == 'TEX_IMAGE' and linked_node.image:
        return os.path.basename(linked_node.image.name or linked_node.image.filepath)
    return None

def load_sprite_bounds(json_path):
    with open(json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    bounds = {}
    width = data['atlas']['width']
    height = data['atlas']['height']
    for sprite_name, sprite_data in data['frames'].items():
        frame = sprite_data['frame']
        x, y, w, h = frame['x'], frame['y'], frame['width'], frame['height']
        y = height - (y + h)  # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è Y –¥–ª—è UV (–∏–Ω–≤–µ—Ä—Å–∏—è)
        u_min = x / width
        u_max = (x + w) / width
        v_min = y / height
        v_max = (y + h) / height
        key_name = normalize_name(sprite_name)
        bounds[key_name] = {
            'original_name': sprite_name,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
            'uv_bounds': ((u_min, u_max), (v_min, v_max)),
            'rotated': sprite_data['rotated'],
            'size_px': (w, h)
        }
    return bounds, width, height  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ width/height

# --- –ö–∞—Å—Ç–æ–º–Ω—ã–π PropertyGroup –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏–π ---------------

class IncludeUVItem(bpy.types.PropertyGroup):
    @classmethod
    def register(cls):
        cls.name = bpy.props.StringProperty(name="UV Channel Name")
        cls.include = bpy.props.BoolProperty(name="Include", default=False)

    @classmethod
    def unregister(cls):
        if hasattr(cls, "name"):
            del cls.name
        if hasattr(cls, "include"):
            del cls.include

# --- –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ UV-–∫–∞–Ω–∞–ª–æ–≤ ---------------

class UV_OT_RefreshUVList(bpy.types.Operator):
    bl_idname = "object.refresh_uv_list"
    bl_label = "Refresh UV List"
    bl_description = "–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö UV-–∫–∞–Ω–∞–ª–æ–≤"

    def execute(self, context):
        unique_uvs = set()
        for obj in context.selected_objects:
            if obj.type == 'MESH' and obj.data.uv_layers:
                for uv in obj.data.uv_layers:
                    unique_uvs.add(uv.name)
        
        scene = context.scene
        scene.uv_include_items.clear()
        for uv_name in sorted(unique_uvs):
            item = scene.uv_include_items.add()
            item.name = uv_name
            item.include = False
        
        self.report({'INFO'}, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {len(unique_uvs)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö UV-–∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
        return {'FINISHED'}

# --- –û–ø–µ—Ä–∞—Ç–æ—Ä 1: –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ----------------------------------

class UV_OT_ApplySpriteAtlas(bpy.types.Operator):
    bl_idname = "object.apply_sprite_atlas_uv"
    bl_label = "Apply UV Remap"
    bl_description = "–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç UV –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º—ë–Ω —Ç–µ–∫—Å—Ç—É—Ä —Å JSON (–±–µ–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)"

    def execute(self, context):
        json_path = context.scene.uv_atlas_json_path
        if not os.path.isfile(json_path):
            self.report({'ERROR'}, f"JSON –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
            return {'CANCELLED'}

        try:
            sprite_bounds, _, _ = load_sprite_bounds(json_path)
            print("[DEBUG] –ö–ª—é—á–∏ –≤ JSON –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:", list(sprite_bounds.keys()))
        except Exception as e:
            self.report({'ERROR'}, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}")
            return {'CANCELLED'}

        count = 0
        for obj in context.selected_objects:  # –¢–æ–ª—å–∫–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ
            if obj.type != 'MESH':
                continue
            for mat_slot in obj.material_slots:
                mat = mat_slot.material
                tex_name_raw = get_texture_name_from_material(mat)
                if not tex_name_raw:
                    continue
                tex_name = normalize_name(tex_name_raw)
                if tex_name in sprite_bounds:
                    count += 1

        self.report({'INFO'}, f"üîç –û–±—ä–µ–∫—Ç–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –∏–º—ë–Ω —Ç–µ–∫—Å—Ç—É—Ä: {count}")
        return {'FINISHED'}

# --- –û–ø–µ—Ä–∞—Ç–æ—Ä 2: –ø–µ—Ä–µ–∞—Ç–ª–∞—Å–æ–≤–∫–∞ UV -------------------------------------------

class UV_OT_PackToSpriteAtlas(bpy.types.Operator):
    bl_idname = "object.pack_sprite_uv"
    bl_label = "Pack UVs to Sprite Atlas"
    bl_description = "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç UV –≤ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø—Ä–∞–π—Ç–∞ (–∞—Ç–ª–∞—Å–∞)"

    def execute(self, context):
        json_path = context.scene.uv_atlas_json_path
        if not os.path.isfile(json_path):
            self.report({'ERROR'}, f"JSON –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
            return {'CANCELLED'}

        try:
            sprite_bounds_all, atlas_width, atlas_height = load_sprite_bounds(json_path)
            print("[DEBUG] –ö–ª—é—á–∏ –≤ JSON –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:", list(sprite_bounds_all.keys()))
        except Exception as e:
            self.report({'ERROR'}, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}")
            return {'CANCELLED'}

        included_uvs = [item.name for item in context.scene.uv_include_items if item.include]
        if not included_uvs:
            all_uvs = set()
            for obj in context.selected_objects:
                if obj.type == 'MESH' and obj.data.uv_layers:
                    for uv in obj.data.uv_layers:
                        all_uvs.add(uv.name)
            included_uvs = sorted(all_uvs)

        assign_mat = context.scene.uv_atlas_material
        padding = context.scene.uv_padding

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∏–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö)
        scene_textures = set()
        for obj in context.selected_objects:
            if obj.type != 'MESH':
                continue
            for mat_slot in obj.material_slots:
                mat = mat_slot.material
                tex_name_raw = get_texture_name_from_material(mat)
                if tex_name_raw:
                    tex_name = normalize_name(tex_name_raw)
                    scene_textures.add(tex_name)
        atlas_keys = set(sprite_bounds_all.keys())
        missing_in_atlas = scene_textures - atlas_keys
        missing_in_scene = atlas_keys - scene_textures
        if missing_in_atlas:
            warn_msg = f"‚ö†Ô∏è –¢–µ–∫—Å—Ç—É—Ä—ã –≤ —Å—Ü–µ–Ω–µ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ JSON: {', '.join(missing_in_atlas)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–µ–Ω–∞ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –≤ –∞—Ç–ª–∞—Å–µ."
            print(warn_msg)
            self.report({'WARNING'}, warn_msg)
        if missing_in_scene:
            warn_msg = f"‚ö†Ô∏è –¢–µ–∫—Å—Ç—É—Ä—ã –≤ JSON –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ü–µ–Ω–µ: {', '.join(missing_in_scene)}. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã, –Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ."
            print(warn_msg)
            self.report({'WARNING'}, warn_msg)

        total_packed = 0
        total_assigned = 0
        for uv_name in included_uvs:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–µ
            texture_to_objs = {}
            for obj in context.selected_objects:
                if obj.type != 'MESH':
                    continue
                mesh = obj.data
                if not mesh.uv_layers or uv_name not in mesh.uv_layers:
                    continue
                tex_name = None
                for mat_slot in obj.material_slots:
                    mat = mat_slot.material
                    tex_name_raw = get_texture_name_from_material(mat)
                    if tex_name_raw:
                        tex_name = normalize_name(tex_name_raw)
                        if tex_name in sprite_bounds_all:
                            break
                if tex_name and tex_name in sprite_bounds_all:
                    texture_to_objs.setdefault(tex_name, []).append(obj)

            # –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã: —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ UV –¥–ª—è –æ–±—â–µ–≥–æ —Ä–∞—Å—á—ë—Ç–∞, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º
            for tex_name, objs in texture_to_objs.items():
                all_uvs = []
                uv_layers = []
                meshes = []
                for obj in objs:
                    uv_layer = obj.data.uv_layers[uv_name]
                    uvs = [[loop.uv.x, loop.uv.y] for loop in uv_layer.data]
                    if uvs:
                        all_uvs.extend(uvs)
                        uv_layers.append(uv_layer)
                        meshes.append(obj.data)
                if not all_uvs:
                    continue
                arr = np.array(all_uvs)
                if arr.ndim != 2 or arr.shape[1] != 2:
                    continue
                # –¶–µ–Ω—Ç—Ä –º–∞—Å—Å—ã (centroid) –≤—Å–µ—Ö UV —Ç–æ—á–µ–∫
                src_center = np.mean(arr, axis=0)
                sprite_data = sprite_bounds_all[tex_name]
                bounds = sprite_data['uv_bounds']
                rotated = sprite_data['rotated']
                # –ë–µ–∑ –ø–∞–¥–¥–∏–Ω–≥–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
                dst_u_min = bounds[0][0]
                dst_u_max = bounds[0][1]
                dst_v_min = bounds[1][0]
                dst_v_max = bounds[1][1]
                dst_center = np.array([(dst_u_min + dst_u_max) / 2, (dst_v_min + dst_v_max) / 2])
                # –ü–æ–≤–æ—Ä–æ—Ç –≤—Å–µ—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö UV –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
                rel = arr - src_center
                if rotated:
                    rel_rot = np.column_stack((rel[:, 1], -rel[:, 0]))
                else:
                    rel_rot = rel
                # –†–∞—Å—á—ë—Ç bounding box –∏ scale –Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                rot_u_min, rot_u_max = rel_rot[:, 0].min(), rel_rot[:, 0].max()
                rot_v_min, rot_v_max = rel_rot[:, 1].min(), rel_rot[:, 1].max()
                src_width = rot_u_max - rot_u_min if rot_u_max > rot_u_min else 1
                src_height = rot_v_max - rot_v_min if rot_v_max > rot_v_min else 1
                dst_width = dst_u_max - dst_u_min
                dst_height = dst_v_max - dst_v_min
                scale_u = dst_width / src_width
                scale_v = dst_height / src_height
                scale = min(scale_u, scale_v)
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–± –∏ —Å–¥–≤–∏–≥ –∫ –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                # –ü–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è, bounding box –º–æ–∂–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å dst_center ‚Äî –Ω—É–∂–Ω–æ —Å–¥–≤–∏–Ω—É—Ç—å –≤ –≥—Ä–∞–Ω–∏—Ü—ã
                rel_rot_scaled = rel_rot * scale
                # bounding box –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                rot_u_min_s, rot_u_max_s = rel_rot_scaled[:, 0].min(), rel_rot_scaled[:, 0].max()
                rot_v_min_s, rot_v_max_s = rel_rot_scaled[:, 1].min(), rel_rot_scaled[:, 1].max()
                # –¶–µ–Ω—Ç—Ä bounding box –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                bbox_center = np.array([
                    (rot_u_min_s + rot_u_max_s) / 2,
                    (rot_v_min_s + rot_v_max_s) / 2
                ])
                # –¶–µ–Ω—Ç—Ä —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                target_center = np.array([
                    (dst_u_min + dst_u_max) / 2,
                    (dst_v_min + dst_v_max) / 2
                ])
                # –°–¥–≤–∏–≥, —á—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä —Å–æ–≤–ø–∞–ª —Å —Ü–µ–Ω—Ç—Ä–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                offset = target_center - bbox_center
                rel_rot_scaled_offset = rel_rot_scaled + offset
                idx = 0
                packed_objs = 0
                for uv_layer, mesh in zip(uv_layers, meshes):
                    num_loops = len(uv_layer.data)
                    rel_rot_obj = rel_rot_scaled_offset[idx:idx + num_loops]
                    for i, loop in enumerate(uv_layer.data):
                        uv_scaled = rel_rot_obj[i]
                        loop.uv = uv_scaled.tolist()
                    mesh.update()
                    packed_objs += 1
                    idx += num_loops
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π —Å–∫–µ–π–ª –¥–ª—è padding –≤ –∫–æ–Ω—Ü–µ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞)
                if padding > 0:
                    sprite_w, sprite_h = sprite_data['size_px']
                    if sprite_w <= 2 * padding or sprite_h <= 2 * padding:
                        print(f"[WARN] –ü—Ä–æ–ø—É—Å–∫ padding –¥–ª—è '{tex_name}': —Ä–∞–∑–º–µ—Ä —Å–ø—Ä–∞–π—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª ({sprite_w}x{sprite_h})")
                        scale_factor = 1.0
                    else:
                        scale_u_pad = (sprite_w - 2 * padding) / sprite_w
                        scale_v_pad = (sprite_h - 2 * padding) / sprite_h
                        scale_factor = min(scale_u_pad, scale_v_pad)
                    if scale_factor < 1.0:
                        for uv_layer, mesh in zip(uv_layers, meshes):
                            for loop in uv_layer.data:
                                uv = np.array([loop.uv.x, loop.uv.y])
                                rel = uv - dst_center
                                rel_scaled = rel * scale_factor
                                new_uv = rel_scaled + dst_center
                                loop.uv = new_uv.tolist()
                            mesh.update()
                        print(f"[INFO] –ü—Ä–∏–º–µ–Ω—ë–Ω padding-—Å–∫–µ–π–ª {scale_factor:.3f} –¥–ª—è '{tex_name}'")
                
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≥—Ä—É–ø–ø–µ –æ–±—ä–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
                if assign_mat:
                    for obj in objs:
                        for slot in obj.material_slots:
                            slot.material = assign_mat
                    total_assigned += len(objs)
                rot_info = " (—Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º)" if rotated else ""
                print(f"[INFO] –ì—Ä—É–ø–ø–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã '{tex_name}', –∫–∞–Ω–∞–ª '{uv_name}': —É–ø–∞–∫–æ–≤–∞–Ω–æ {packed_objs} –æ–±—ä–µ–∫—Ç–æ–≤{rot_info}")
                total_packed += packed_objs

        msg = f"‚úÖ –£–ø–∞–∫–æ–≤–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_packed}"
        if total_assigned > 0:
            msg += f" | –ù–∞–∑–Ω–∞—á–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {total_assigned} –æ–±—ä–µ–∫—Ç–∞–º"
        self.report({'INFO'}, msg)
        return {'FINISHED'}

# --- –û–±—â–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ -----------------------------------------------

class UV_PT_SpriteAtlasPanel(bpy.types.Panel):
    bl_label = "Sprite Atlas UV Tools"
    bl_idname = "OBJECT_PT_sprite_uv_remap"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'UV Atlas'

    def draw(self, context):
        layout = self.layout
        layout.prop(context.scene, "uv_atlas_json_path")
        
        layout.operator("object.refresh_uv_list", icon="FILE_REFRESH")
        
        box = layout.box()
        box.label(text="–í–∫–ª—é—á–∏—Ç—å UV-–∫–∞–Ω–∞–ª—ã –¥–ª—è packing:")
        if not context.scene.uv_include_items:
            box.label(text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç - –ø–∞–∫—É–µ–º –≤—Å–µ. –ù–∞–∂–º–∏—Ç–µ Refresh.")
        else:
            for item in context.scene.uv_include_items:
                row = box.row()
                row.prop(item, "include", text="")
                row.label(text=item.name)
        
        layout.prop(context.scene, "uv_atlas_material")  # –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        layout.prop(context.scene, "uv_padding")  # –ü–∞—Ä–∞–º–µ—Ç—Ä padding
        
        layout.operator("object.pack_sprite_uv", icon="MOD_UVPROJECT")
        layout.operator("object.apply_sprite_atlas_uv", icon="UV")

# --- –î—É–±–ª–∏—Ä—É—é—â–∞—è –ø–∞–Ω–µ–ª—å –≤ UV Editor ----------------------------------------

class UV_PT_SpriteAtlasPanel_UVEditor(UV_PT_SpriteAtlasPanel):
    bl_space_type = 'IMAGE_EDITOR'
    bl_idname = "IMAGE_PT_sprite_uv_remap"

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -----------------------------------------------------------

classes = [
    IncludeUVItem,
    UV_OT_RefreshUVList,
    UV_OT_ApplySpriteAtlas,
    UV_OT_PackToSpriteAtlas,
    UV_PT_SpriteAtlasPanel,
    UV_PT_SpriteAtlasPanel_UVEditor,
]

def register():
    for cls in classes:
        bpy.utils.register_class(cls)
    bpy.types.Scene.uv_atlas_json_path = bpy.props.StringProperty(
        name="Atlas JSON Path",
        description="–ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å–ø—Ä–∞–π—Ç-–∞—Ç–ª–∞—Å–∞",
        subtype='FILE_PATH'
    )
    bpy.types.Scene.uv_include_items = bpy.props.CollectionProperty(type=IncludeUVItem)
    bpy.types.Scene.uv_atlas_material = bpy.props.PointerProperty(
        type=bpy.types.Material,
        name="Assign Material",
        description="–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ packing"
    )
    bpy.types.Scene.uv_padding = bpy.props.IntProperty(
        name="Padding (px)",
        description="–û—Ç—Å—Ç—É–ø –≤ –ø–∏–∫—Å–µ–ª—è—Ö —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Å–∫–µ–π–ª–∞ –æ—Å—Ç—Ä–æ–≤–æ–≤",
        default=0,
        min=0
    )

def unregister():
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)
    del bpy.types.Scene.uv_atlas_json_path
    del bpy.types.Scene.uv_include_items
    del bpy.types.Scene.uv_atlas_material
    del bpy.types.Scene.uv_padding

if __name__ == "__main__":
    register()